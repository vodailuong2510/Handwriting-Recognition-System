# -*- coding: utf-8 -*-
"""test_model

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tw4MADJrrqM-pqfw7FxFBzV0bn7skoem
"""

import tensorflow as tf
mnist=tf.keras.datasets.mnist
(training_images, training_labels), (test_images, test_labels) = mnist.load_data()

import matplotlib.pyplot as plt

from google.colab import drive
drive.mount("/content/drive")

cd/content/drive/MyDrive/Lượng và hành trình nghiêm cứu khoa học/nhandienchuviettay

!pip install wget

import wget

from tensorflow.keras.models import Sequential

from sklearn.utils import shuffle

training_images, training_labels=shuffle(training_images, training_labels)

training_images=training_images.astype("float")/255.0
test_images=test_images.astype("float")/255.0

training_images=tf.expand_dims(training_images,axis=-1)
test_images=tf.expand_dims(test_images,axis=-1)

model = Sequential()

width=28
height=28
shape=(width,height,1)

from tensorflow.keras.optimizers import SGD
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Model
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import BatchNormalization
from tensorflow.keras.layers import AveragePooling2D
from tensorflow.keras.layers import MaxPooling2D
from tensorflow.keras.layers import Conv2D
from tensorflow.keras.layers import Activation
from tensorflow.keras.layers import Dropout
from tensorflow.keras.layers import Flatten
from tensorflow.keras.layers import Input
from tensorflow.keras.layers import Dense
from tensorflow.keras.layers import concatenate

model.add(Conv2D(28, (3, 3), padding="same", input_shape=shape))

model.add(Activation("relu"))

model.add(MaxPooling2D(pool_size=(2,2)))

model.add(Flatten())

model.add(Dense(128))

model.add(Activation("relu"))

model.add(Dense(10))

model.add(Activation("softmax"))

model.summary()

learning_rate = 0.01

epochs = 10
batch_size = 64

opt = SGD(learning_rate=learning_rate, momentum=0.9)

aug = ImageDataGenerator(rotation_range=0.18, zoom_range=0.15, width_shift_range=0.2, height_shift_range=0.2, horizontal_flip=True)

model.compile(optimizer=opt, loss='sparse_categorical_crossentropy', metrics=['accuracy'])

print("Start training")
H = model.fit_generator(aug.flow(training_images, training_labels, batch_size=batch_size), validation_data=(test_images, test_labels), steps_per_epoch=training_images.shape[0]//batch_size, epochs=epochs, verbose=1)

model.save("luongvamnist.h5")

saved_model = tf.keras.models.load_model("luongvamnist.h5")

result = saved_model.predict(test_images[9000:9001])

import numpy as np

final_result = np.argmax(result)

final_result

plt.imshow(test_images[9000])